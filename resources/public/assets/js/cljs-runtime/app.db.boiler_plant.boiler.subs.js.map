{"version":3,"sources":["app/db/boiler_plant/boiler/subs.cljs"],"mappings":"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","names":["refx.alpha.reg_sub","p__27732","map__27733","cljs.core/--destructure-map","cljs.core.get","kit","db","_","cljs.core.get_in","refx.alpha/reg-sub","boiler","unit","value","G__27786","cljs.core._EQ_","Math/round","cljs.pprint.cl_format","js/parseFloat","map__27803","G__27822","map__27836","G__27843","G__27876","p__27890","map__27892","sludge-mass","map__27896","max-value","value-%","sludge-mass-%","max-svg-height","p__27909","map__27910","pressure","conductivity","current-hotspot"],"sourcesContent":["(ns app.db.boiler-plant.boiler.subs\n  (:require [refx.alpha :refer [reg-sub]]\n            [cljs.pprint :refer [cl-format]]))\n\n(reg-sub :boiler\n         (fn [{:keys [kit] :as db} _]\n           (get-in db [kit :boiler-plant :boiler])))\n\n(reg-sub :boiler-init-sim-output-pressure-converted-value\n         :<- [:boiler]\n         (fn [boiler _]\n           (let [unit (-> boiler :pressure :unit)\n                 value (-> boiler :init-sim-output :pressure :value)]\n             (cond-> value\n                     (= unit \"psi\") (-> (* 14.5037738) Math/round)\n                     :default (->> (cl-format nil \"~,1f\") js/parseFloat)))))\n\n(reg-sub :boiler-pressure-converted-value\n         :<- [:boiler]\n         (fn [boiler _]\n           (let [{:keys [unit value]} (:pressure boiler)]\n             (cond-> value\n                     (= unit \"psi\") (-> (* 14.5037738) Math/round)\n                     :default (->> (cl-format nil \"~,1f\") js/parseFloat)))))\n\n(reg-sub :boiler-conductivity-converted-value\n         :<- [:boiler]\n         (fn [boiler _]\n           (let [{:keys [unit value]} (:conductivity boiler)]\n             (cond-> value\n                     (= unit \"ppm\") (-> (* 0.5) Math/round)\n                     :default Math/round))))\n\n(reg-sub :boiler-init-sim-output-conductivity-converted-value\n         :<- [:boiler]\n         (fn [boiler _]\n           (let [unit (-> boiler :conductivity :unit)\n                 value (-> boiler :init-sim-output :conductivity :value)]\n             (cond-> value\n                     (= unit \"ppm\") (-> (* 0.5) Math/round)\n                     :default Math/round))))\n\n(reg-sub :sludge-mass-%\n         :<- [:boiler]\n         (fn [{:keys [sludge-mass]} _]\n           (let [{:keys [value max-value]} sludge-mass\n                 value-% (* 100 (/ value max-value))]\n             (if (< value-% 0) 0 value-%))))\n\n(reg-sub :sludge-svg-height\n         :<- [:sludge-mass-%]\n         (fn [sludge-mass-% _]\n           (let [max-svg-height 20.587]\n             (* (/ max-svg-height 100) sludge-mass-%))))\n\n(reg-sub :show-water-foam\n         :<- [:boiler]\n         (fn [{:keys [pressure conductivity]} _]\n           (and (< (- (:value pressure) (:prev-value pressure)) -0.027) (> (:value conductivity) 2500))))\n\n(reg-sub :boiler-show-toolbar-panel\n         :<- [:current-hotspot]\n         (fn [current-hotspot _]\n           (= current-hotspot \"boiler\")))\n"]}