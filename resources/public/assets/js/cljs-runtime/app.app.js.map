{"version":3,"sources":["app/app.cljs"],"mappings":";AAUA,kCAAA,lCAAMA,4EAAyBC;AAA/B,AACE,2BAAA,mFAAA,vGAACC,+KAAyB,AAAc,AAAUD,oBAAI,AAAe,AAAUA;;AAEjF,AAAA;AAAA,cAAA,iBAAAE,WAAA,6BAAAC,qBAAAC,5FAAOK;AAAP,AAAA,IAAAJ,aAAA,mFAAA,AAAAC,8BAAAH,sBAAAC;AAAA,AAAA;AAkLU,IAAAuC,iBAAA,AAAAC,oBAAA;AAhLI,wBAAA,xBAAmBlC,iCAAmBX,jCAgL1C;;AA/KI;AAAA,AACE,kCAAA,3BAAsBW,oCAAmBX;;;qBAmJjB,jBA2B9B8C;AAAA,AAAA,CAAAC,2DAAAA,yDAAAH,eAAAE,kBAAAC,qCAAAH,eAAAE;;AA5KR,IAAMlC,MAAI,mBAAA,mFAAA,tGAACC;IACLZ,IAAE,mBAAA,mFAAA,tGAACY;IACHC,IAAE,mBAAA,mFAAA,tGAACD;IACHE,UAAQ,mBAAA,mFAAA,tGAACF;AAHf,AAiKK,IAAAkB,WAAA;8IA5JyC,gDAAA,HAAK9B,qDAAgB,gDAAA,HAAKa,zRA4JnEkB,WAAA,iBAAAC,WAAA,EAAA,YAAA,cAAA,QAAA,iBAAAC,WAAA,EAAA,QAAA,AAAAC,yFAAA,SAAA,AAAAA;AAAA,AAAAD;KAAA,WAAA,CAAA,iBAAAE,WAAA;IAAAC,WAAA,iBAAAC,WAAA,EAAA,YAAA,cAAA,WAAA,iBAAAC,WAAA;uHA1JqC,+DAAA,lBAAK,CAAA,OAAMxB,xKA0JhDyB,WAAA,iBAAAC,WAAA,EAAA,QAAA,iBAAAC,WAAA,EAAA,WAAA,AAAAP;AAAA,AAAAO;KAAA,WAAA;AAAA,AAAAD;;AAAA,AAAA,QAAAjB,+CAAAA,6CAAAe,SAAAC,YAAAhB,yBAAAe,SAAAC;;AAAA,AAAAF;;AAAA,AAAA,QAAAd,+CAAAA,6CAAAY,SAAAC,YAAAb,yBAAAY,SAAAC;KAvJI,+DAAA,7DAAM,iDAAA,jDAACrB,6CAAEJ,4CACJK,5BA6CT,iBAAAK;IAAAC,WAAA;AAAA,AAAA,QAAAC,+CAAAA,6CAAAF,SAAAC,YAAAC,yBAAAF,SAAAC;KA9CI,kCAEGL,5BA4CP,iBAAAO;IAAAC,WAAA;AAAA,AAAA,QAAAF,+CAAAA,6CAAAC,SAAAC,YAAAF,yBAAAC,SAAAC;iCA3COP,5BA2CP,iBAAAQ;IAAAC,WAAA;AAAA,AAAA,QAAAJ,+CAAAA,6CAAAG,SAAAC,YAAAJ,yBAAAG,SAAAC;KA1CI,iBAAAR,WAAMR;AAAN,AAAA,QAAAQ;KAAA;eACeC,fAyCnB,IAAAQ;IAAAC,WAAA;AAAA,AAAA,QAAAN,+CAAAA,6CAAAK,SAAAC,YAAAN,yBAAAK,SAAAC;;;;AA1CI;;;;AAmJJ,AAAAG;;AAAA,AAAA,QAAAU,gDAAAA,8CAAAZ,SAAAC,YAAAW,0BAAAZ,SAAAC;;AAvKP,AAAA,GAAA,AAAAxB;AAAA,IAAAC,WAAAN;AAAA,AAAA,CAAA,AAAAM,uBAAA;;AAAAA;;AAAAN;;;;AAAA;AAAA;AAAOO","names":["app.app/window-resizing-handler","w","refx.alpha/dispatch","G__42088","props__27584__auto__","maybe-ref__27585__auto__","vec__42089","helix.core/extract-cljs-props","goog/DEBUG","G__42119","app.app/app","js/window","kit","refx.alpha/use-sub","h","scale-f","cljs.core._EQ_","app.connect.cables/cables","app.shared.boiler-plant.core/boiler-plant","app.shared.sidebar.core/sidebar","G__42116","app.connect.core/connect-kit","G__42110","G__42111","helix.core/jsx","G__42112","G__42113","G__42114","G__42115","G__42117","G__42118","G__42094","G__42095","obj42097","obj42099","helix.impl.props/->js","G__42100","G__42101","obj42103","G__42104","G__42105","obj42107","obj42109","helix.core/jsxs","G__42092","helix.hooks/wrap-fx","G__42093","helix.hooks/raw-use-effect"],"sourcesContent":["(ns app.app\n  (:require [helix.core :refer [defnc $]]\n            [helix.hooks :refer [use-effect]]\n            [helix.dom :as d]\n            [refx.alpha :refer [use-sub dispatch]]\n            [app.shared.sidebar.core :refer [sidebar]]\n            [app.connect.cables :refer [cables]]\n            [app.connect.core :refer [connect-kit]]\n            [app.shared.boiler-plant.core :refer [boiler-plant]]))\n\n(defn window-resizing-handler [w]\n  (dispatch [:window-resize (.-innerWidth (.-target w)) (.-innerHeight (.-target w))]))\n\n(defnc app []\n  (use-effect :once\n              (.addEventListener js/window \"resize\" window-resizing-handler)\n              (fn []\n                (.removeEventListener js/window \"resize\" window-resizing-handler)))\n\n  (let [kit (use-sub [:kit])\n        w (use-sub [:screen-w])\n        h (use-sub [:screen-h])\n        scale-f (use-sub [:screen-scale-f])]\n\n    (d/div {:class \"kit-wrapper\" :style {:width (str w \"px\") :height (str h \"px\")}}\n           (d/p {:class \"version-tag\"}\n                (d/span {:style {:font-size (str (* 14 scale-f) \"px\")}} \"Version: 1.0\"))\n\n\n           (when (= kit \"connect\")\n             ($ cables))\n           ($ boiler-plant)\n           ($ sidebar)\n           (case kit\n             \"connect\" ($ connect-kit)\n             nil))))"]}