{"version":3,"sources":["app/db/burner/subs.cljs"],"mappings":";AAIA,iDAAA,jDAACA,0GACQ,WAAAC,SAA0BM;AAA1B,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAAA,LAAsBI;UAAtB,AAAAF,4CAAAF,eAAA,jEAAaG;AAAb,AACE,yDAAA,wIAAA,1LAACG,+CAAOF,sFAAI,AAACG,gDAAQJ;;AAEhC,mBAAA,wEAAA,gDAAA,mFAAA,9NAACK,+RAEQ,WAAKC,OAAOJ;AAAZ,AACE,OAAA,wFAASI;;AAEpB,mBAAA,2EAAA,gDAAA,mFAAA,jOAACD,kSAEQ,WAAKC,OAAOJ;AAAZ,AACE,OAAA,2FAAWI;;AAEtB,mBAAA,qFAAA,gDAAA,mFAAA,3OAACD,8TAEQ,WAAKE,SAASL;AAAd,AACE,OAAA,mFAAOK;;AAGlB,mBAAA,mIAAA,gDAAA,mFAAA,zRAACF,4WAEQ,WAAKE,SAASL;AAAd,AACE,IAAAM,aAA2B,AAAA,0FAAWD;IAAtCC,iBAAA,AAAAV,4BAAAU;WAAA,AAAAT,4CAAAS,eAAA,lEAAcC;YAAd,AAAAV,4CAAAS,eAAA,nEAAmBE;AAAnB,AACE,IAAAC,WAAQ,AAAA,8EAAKD;IAAbC,eAAA,gGAAAA,9FACQ,kDAAA,lDAACC,6CAAEH,aAAY,WAAI,CAAAE,WAAA,vBAAeE;AAD1C,AAAA,AAEiB,kBAAK,2DAAA,KAAA,yDAAAF,zHAACG,XAAsBC;;;AAE1D,mBAAA,oIAAA,gDAAA,mFAAA,1RAACV,6WAEQ,WAAKE,SAASL;AAAd,AACE,IAAAc,aAA2B,AAAA,0FAAWT;IAAtCS,iBAAA,AAAAlB,4BAAAkB;WAAA,AAAAjB,4CAAAiB,eAAA,lEAAcP;YAAd,AAAAV,4CAAAiB,eAAA,nEAAmBN;AAAnB,AACE,IAAAO,WAAQ,AAAA,gFAAMP;IAAdO,eAAA,gGAAAA,9FACQ,kDAAA,lDAACL,6CAAEH,aAAY,WAAI,CAAAQ,WAAA,vBAAeJ;AAD1C,AAAA,AAEiB,kBAAK,2DAAA,KAAA,yDAAAI,zHAACH,XAAsBC;;;AAE1D,mBAAA,+HAAA,gDAAA,mFAAA,rRAACV,wWAEQ,WAAKE,SAASL;AAAd,AACE,IAAAgB,aAA2B,AAAA,+EAAA,AAAA,qFAAIX;IAA/BW,iBAAA,AAAApB,4BAAAoB;WAAA,AAAAnB,4CAAAmB,eAAA,lEAAcT;YAAd,AAAAV,4CAAAmB,eAAA,nEAAmBR;AAAnB,AACE,IAAAS,WAAQT;AAAR,AAAA,GACQ,kDAAA,lDAACE,6CAAEH;AAAW,QAAAU,WAAA;;AADtBA;;;AAGb,mBAAA,0JAAA,gDAAA,mFAAA,hTAACd,mYAEQ,WAAKE,SAASL;AAAd,AACE,IAAAkB,aAA2B,AAAA,qFAAA,AAAA,2GAAIb;IAA/Ba,iBAAA,AAAAtB,4BAAAsB;WAAA,AAAArB,4CAAAqB,eAAA,lEAAcX;YAAd,AAAAV,4CAAAqB,eAAA,nEAAmBV;AAAnB,AACE,IAAAW,WAAQX;IAARW,eAAA,qOAAAA,nOACQ,kDAAA,lDAACT,6CAAEH,uBAAiB,oIAAK,CAAA,SAAAY,nIAAS,2DAAA,KAAA,hEAACP,XAAsBC;AADjE,AAAA,GAEQ,kDAAA,lDAACH,6CAAEH;AAAiB,kBAAK,2DAAA,KAAA,yDAAAY,zHAACP,XAAsBC;;AAFxDM;;;AAIb,mBAAA,+FAAA,gDAAA,mFAAA,rPAAChB,uUAEQ,WAAKiB,gBAAgBpB;AAArB,AACE,oEAAA,7DAACU,6CAAEU","names":["refx.alpha.reg_sub","p__47256","map__47257","cljs.core/--destructure-map","cljs.core.get","kit","db","_","cljs.core.get_in","cljs.core.keyword","refx.alpha/reg-sub","burner","settings","map__47258","unit","value","G__47259","cljs.core._EQ_","Math/round","cljs.pprint.cl_format","js/parseFloat","map__47260","G__47261","map__47262","G__47263","map__47264","G__47265","current-hotspot"],"sourcesContent":["(ns app.db.burner.subs\n  (:require [refx.alpha :refer [reg-sub]]\n            [cljs.pprint :refer [cl-format]]))\n\n(reg-sub :burner\n         (fn [{:keys [kit] :as db} _]\n           (get-in db [(keyword kit) :burner])))\n\n(reg-sub :burner-status\n         :<- [:burner]\n         (fn [burner _]\n           (:status burner)))\n\n(reg-sub :burner-settings\n         :<- [:burner]\n         (fn [burner _]\n           (:settings burner)))\n\n(reg-sub :burner-settings-view\n         :<- [:burner-settings]\n         (fn [settings _]\n           (:view settings)))\n\n\n(reg-sub :burner-settings-pressure-converted-value-on\n         :<- [:burner-settings]\n         (fn [settings _]\n           (let [{:keys [unit value]} (:pressure settings)]\n             (cond-> (:on value)\n                     (= unit \"psi\") (-> (* 14.5037738) Math/round)\n                     :default (->> (cl-format nil \"~,1f\") js/parseFloat)))))\n\n(reg-sub :burner-settings-pressure-converted-value-off\n         :<- [:burner-settings]\n         (fn [settings _]\n           (let [{:keys [unit value]} (:pressure settings)]\n             (cond-> (:off value)\n                     (= unit \"psi\") (-> (* 14.5037738) Math/round)\n                     :default (->> (cl-format nil \"~,1f\") js/parseFloat)))))\n\n(reg-sub :burner-settings-power-max-converted-value\n         :<- [:burner-settings]\n         (fn [settings _]\n           (let [{:keys [unit value]} (-> settings :power :max)]\n             (cond-> value\n                     (= unit \"MW\") (* 0.001)))))\n\n(reg-sub :burner-settings-fuel-consumption-coeff-converted-value\n         :<- [:burner-settings]\n         (fn [settings _]\n           (let [{:keys [unit value]} (-> settings :fuel-consumption :coeff)]\n             (cond-> value\n                     (= unit \"nm\u00b3/kW*s\") (->> (* 3600) (cl-format nil \"~,1f\") js/parseFloat)\n                     (= unit \"nm\u00b3/kW*h\") (->> (cl-format nil \"~,3f\") js/parseFloat)))))\n\n(reg-sub :burner-show-toolbar-panel\n         :<- [:current-hotspot]\n         (fn [current-hotspot _]\n           (= current-hotspot \"burner\")))\n\n\n\n\n\n\n\n\n"]}