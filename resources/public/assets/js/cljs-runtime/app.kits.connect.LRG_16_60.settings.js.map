{"version":3,"sources":["app/kits/connect/LRG_16_60/settings.cljs"],"mappings":"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","names":["G__46427","props__27584__auto__","maybe-ref__27585__auto__","vec__46438","helix.core/extract-cljs-props","goog/DEBUG","G__46514","app.kits.connect.LRG-16-60.settings/correction-dirty-factor","value","refx.alpha/use-sub","limits","app.units.constants/UNIT-LIMITS","cljs.core.get","validate-message","app.shared.components.form/field-row","app.shared.components.form/input-number","p1__46395#","refx.alpha/dispatch","p1__46400#","app.shared.components.form/validate-input-number","app.shared.components.form/select","p1__46401#","cljs.core/identity","G__46557","vec__46566","G__46629","app.kits.connect.LRG-16-60.settings/correction-dirty-temp-coeff","p1__46524#","p1__46528#","p1__46529#","G__46632","vec__46633","G__46648","app.kits.connect.LRG-16-60.settings/settings-form","G__46650","vec__46651","G__46660","app.kits.connect.LRG-16-60.settings/LRG-16-60-settings","show-settings","app.shared.components.modal/settings","G__46456","G__46457","obj46461","G__46463","G__46464","helix.impl.props/merge-obj","obj46468","helix.impl.props._props","helix.core/jsx","G__46493","G__46494","obj46498","helix.core/jsxs","G__46588","G__46589","obj46591","G__46596","G__46597","obj46599","G__46618","G__46619","obj46625","G__46636","helix.core/Fragment","G__46637","G__46644","G__46645","G__46646","G__46647","G__46654","G__46655","obj46657","G__46658","G__46659","G__46638","G__46639","obj46641","obj46643","helix.impl.props/->js"],"sourcesContent":["(ns app.kits.connect.LRG-16-60.settings\n  (:require [helix.core :refer [defnc $ <>]]\n            [helix.dom :as d]\n            [refx.alpha :refer [use-sub dispatch]]\n            [app.shared.components.modal :as modal]\n            [app.shared.components.form :as f]\n            [app.units.constants :refer [UNIT-LIMITS]]))\n\n(defnc correction-dirty-factor []\n  (let [value (use-sub [:kit-data-by-keywords [:cond :probes 0 \"LRG 16-60\" :correction-dirty :factor]])\n        limits (-> UNIT-LIMITS :cond-probe-correction-f (get \"factor\"))\n        validate-message (str \"Initial cell constant value must be within following range: [\" (:min limits) \" - \" (:max limits) \"] \" \"factor\")]\n    ($ f/field-row {:label \"CELL CONSTANT\"}\n       ($ f/input-number {:value     value\n                          :on-change #(dispatch [:change-LRG-16-60 [[:correction-dirty :factor] %]])\n                          :on-blur   (fn [] (f/validate-input-number value\n                                                                     (:min limits)\n                                                                     (:max limits)\n                                                                     validate-message\n                                                                     #(dispatch [:change-LRG-16-60 [[:correction-dirty :factor] %]])))\n                          :&         limits})\n\n       ($ f/select {:data      [{:value \"factor\" :label \"factor\"}]\n                    :value     \"factor\"\n                    :on-change #(identity %)}))))\n\n(defnc correction-dirty-temp-coeff []\n  (let [value (use-sub [:kit-data-by-keywords [:cond :probes 0 \"LRG 16-60\" :correction-dirty :temperature-coeff]])\n        limits (-> UNIT-LIMITS :cond-probe-temperature-coeff (get \"%/\u00b0C\"))\n        validate-message (str \"Initial temperature coefficient value must be within following range: [\" (:min limits) \" - \" (:max limits) \"] \" \"%/\u00b0C\")]\n    ($ f/field-row {:label \"TEMPERATURE COEFFICIENT\"}\n       ($ f/input-number {:value     value\n                          :on-change #(dispatch [:change-LRG-16-60 [[:correction-dirty :temperature-coeff] %]])\n                          :on-blur   (fn [] (f/validate-input-number value\n                                                                     (:min limits)\n                                                                     (:max limits)\n                                                                     validate-message\n                                                                     #(dispatch [:change-LRG-16-60 [[:correction-dirty :temperature-coeff] %]])))\n                          :&         limits})\n\n       ($ f/select {:data      [{:value \"%/\u00b0C\" :label \"%/\u00b0C\"}]\n                    :value     \"%/\u00b0C\"\n                    :on-change #(identity %)}))))\n\n(defnc settings-form []\n  (<>\n    (d/div {:class \"divider\" :style {:margin-top 0}} \"specifications\")\n\n    ($ correction-dirty-factor)\n\n    ($ correction-dirty-temp-coeff)))\n\n(defnc LRG-16-60-settings []\n  (let [show-settings (use-sub [:kit-data-by-keywords [:cond :probes 0 \"LRG 16-60\" :settings-view]])]\n    (when show-settings\n      ($ modal/settings {:title      \"Dirty Data Settings\"\n                         :on-default #(dispatch [:restore-defaults-LRG-16-60-settings])\n                         :on-done    #(dispatch [:apply-LRG-16-60-settings])}\n\n         ($ settings-form)))))\n"]}