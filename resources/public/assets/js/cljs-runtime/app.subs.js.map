{"version":3,"sources":["app/subs.cljs"],"mappings":";AAGA,iDAAA,jDAACA,2GACQ,WAAKC,GAAGC;AAAR,AACE,OAAA,wFAAUD;;AAErB,iDAAA,jDAACD,uGACQ,WAAKC,GAAGC;AAAR,AACE,OAACC,eAAK,AAAA,oFAAQF;;AAEzB,iDAAA,jDAACD,wHACQ,WAAKE,EAAEA;AAAP,AAAA,0FACG,eAAA,mFAAA,lGAACE,iKAAc,eAAA,mFAAA,lGAACA;GACnB,WAAAC,SAAqBH;AAArB,AAAA,IAAAI,aAAAD;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAAME;cAAN,AAAAD,4CAAAD,WAAA,IAAA,rEAAYG;AAAZ,AACE,IAAMC,YAAU,iBAAAC,WAAMF;IAANE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACU,4BAAA,rBAACG;;;KADX;AAAA;;;KAAA;AAGOC;;;;AAHP,MAAA,KAAAF,MAAA,CAAA,mEAAAF;;;;AAAhB,AAIE,OAACK,+CAAON,UAAUF;;AAE/B,iDAAA,jDAACR,sHACQ,WAAKE,EAAEA;AAAP,AACG,sBAAA,mFAAA,lGAACE;GACJ,WAAKI,MAAMN;AAAX,AACE,8BAAA,vBAACe,4EAAaT;;AAEzB,mBAAA,0EAAA,gDAAA,mFAAA,hOAACU,8RAEQ,WAAKV,MAAMN;AAAX,AACE,OAACiB,gBAAM,+CAAA,/CAACH,oGAAaR;;AAEhC,wDAAA,sEAAA,gDAAA,mFAAA,8DAAA,kGAAA,mFAAA,pfAACR,skBAGQ,WAAAoB,SAAuBlB;AAAvB,AAAA,IAAAmB,aAAAD;YAAA,AAAAb,4CAAAc,WAAA,IAAA,nEAAMb;gBAAN,AAAAD,4CAAAc,WAAA,IAAA,vEAAYC;AAAZ,AAAA,0FACG,CAAG,AAACH,gBAAMX,SAAOc,WAAWA","names":["refx.alpha.reg_sub","db","_","cljs.core/vals","refx.alpha/sub","p__37699","vec__37700","cljs.core.nth","todos","showing","filter-fn","G__37703","cljs.core/Keyword","js/Error","cljs.core/complement","cljs.core/identity","cljs.core.filter","cljs.core/every?","refx.alpha/reg-sub","cljs.core/count","p__37719","vec__37720","completed"],"sourcesContent":["(ns app.subs\n  (:require [refx.alpha :refer [reg-sub sub]]))\n\n(reg-sub :showing\n         (fn [db _]\n           (:showing db)))\n\n(reg-sub :todos\n         (fn [db _]\n           (vals (:todos db))))\n\n(reg-sub :visible-todos\n         (fn [_ _]\n           [(sub [:todos]) (sub [:showing])])\n         (fn [[todos showing] _]\n           (let [filter-fn (case showing\n                             :active (complement :done)\n                             :done :done\n                             :all identity)]\n             (filter filter-fn todos))))\n\n(reg-sub :all-complete?\n         (fn [_ _]\n            (sub [:todos]))\n         (fn [todos _]\n           (every? :done todos)))\n\n(reg-sub :completed-count\n         :<- [:todos]\n         (fn [todos _]\n           (count (filter :done todos))))\n\n(reg-sub :footer-counts\n         :<- [:todos]\n         :<- [:completed-count]\n         (fn [[todos completed] _]\n           [(- (count todos) completed) completed]))"]}