{"version":3,"sources":["app/ws/socket.cljs"],"mappings":";AAKA,AAAKA,8BAAc,6CAAA,7CAACC;AAEpB,AAAKC,wBAAQ,6CAAA,7CAACD;AACd,AAAKE,gCAAW,6CAAA,7CAACF;AAEjB,uBAAA,2CAAA,qDAAA,qDAAA,yIAAA,4DAAA,oDAAA,sDAAA,YAAA,qDAAA,5hBAAKG,mOACgB,AAACC;AAKtB,oCAAA,pCAAMC;AAAN,AACE,IAAAC,aAAgC,qFAAA,MAAA,3FAACK,kJAA4CR;IAA7EG,iBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,eAAA,rEAAcG;cAAd,AAAAD,4CAAAF,eAAA,rEAAsBI;AAAtB,AACE,AAACE,sBAAOX,sBAAQQ;;AAChB,OAACG,sBAAOV,8BAAWQ;;AAEvB,yCAAA,zCAAMG;AAAN,AACE,IAAAC,qBAAA,AAAAC,gBAAoBhB;AAApB,AAAA,oBAAAe;AAAA,AAAA,cAAAA,VAAWE;AAAX,AACE,QAACA,wCAAAA,0CAAAA;;AADH;;;AAGF,0CAAA,1CAAMC;AAAN,AACE,AAACJ;;AACD,OAACD,sBAAOb,4BAAc,8CAAA,AAAAgB,9CAACG,8DAAiCjB,uBAAQkB;;AAElE,4BAAA,5BAAMC;AAAN,AACE,AAACf;;AACD,OAACY;;AAEH,2BAAA,3BAAMI,8DAAOC;AAAb,AACE,IAAAC,eAAA,AAAAR,gBAAEb;AAAF,AAAA,QAAAqB,6CAAAA,oDAAAA,TAAaD,gCAAAA","names":["app.ws.socket/socket-router","cljs.core.atom","app.ws.socket/ch-chsk","app.ws.socket/chsk-send!","app.ws.socket/config","taoensso.sente.packers.transit.get_transit_packer","app.ws.socket/create-client!","map__41352","cljs.core/--destructure-map","cljs.core.get","ch-recv","send-fn","taoensso.sente.make_channel_socket_client_BANG_","cljs.core/reset!","app.ws.socket/stop-socket-router!","temp__5804__auto__","cljs.core/deref","stop-fn","app.ws.socket/start-socket-router!","taoensso.sente/start-client-chsk-router!","app.ws.handlers/event-msg-handler","app.ws.socket/start!","app.ws.socket/send!","event","fexpr__41366"],"sourcesContent":["(ns app.ws.socket\n  (:require [taoensso.sente :as sente]\n            [taoensso.sente.packers.transit :as sente-transit]\n            [app.ws.handlers :refer [event-msg-handler]]))\n\n(def socket-router (atom nil))\n\n(def ch-chsk (atom nil))\n(def chsk-send! (atom nil))\n\n(def config {:type :auto\n             :packer (sente-transit/get-transit-packer) ;:edn\n             :protocol :http\n             :host \"localhost\"\n             :port 8090})\n\n(defn create-client! []\n  (let [{:keys [ch-recv send-fn]} (sente/make-channel-socket-client! \"/ws\" nil config)]\n    (reset! ch-chsk ch-recv)\n    (reset! chsk-send! send-fn)))\n\n(defn stop-socket-router! []\n  (when-let [stop-fn @socket-router]\n    (stop-fn)))\n\n(defn start-socket-router! []\n  (stop-socket-router!)\n  (reset! socket-router (sente/start-client-chsk-router! @ch-chsk event-msg-handler)))\n\n(defn start! []\n  (create-client!)\n  (start-socket-router!))\n\n(defn send! [event]\n  (@chsk-send! event))\n"]}