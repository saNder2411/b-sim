{"version":3,"sources":["app/db/kits/connect/NRR_2_60/subs.cljs"],"mappings":";AAKA,mBAAA,6DAAA,gDAAA,mFAAA,nNAACA,uRAEQ,WAAAC,SAAqBK;AAArB,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAaG;AAAb,AACE,4DAAA,mFAAA,oEAAA,5MAACE,+CAAOF;;AAEnB,mBAAA,qFAAA,gDAAA,mFAAA,3OAACL,gTAEQ,WAAAQ,SAA2BF;AAA3B,AAAA,IAAAG,aAAAD;IAAAC,iBAAA,AAAAN,4BAAAM;kBAAA,AAAAL,4CAAAK,eAAA,zEAAaC;AAAb,AACE,IAAAC,aAA6BD;IAA7BC,iBAAA,AAAAR,4BAAAQ;aAAA,AAAAP,4CAAAO,eAAA,pEAAcC;YAAd,AAAAR,4CAAAO,eAAA,nEAAqBE;IACfC,iBAAe,AAACC,kCAAqB,AAAA,mFAAOH,QAAQ,AAAA,8FAAaC;IACjEG,sBAAoB,CAAG,AAAA,gFAAA,AAAA,4GAAIC,uCAA0C,CAAGH,iBAAe,AAAA,4GAAA,AAAA,4GAAIG;AAFjG,6CAGMP,nBACA,+BAAA,mFAAA,0DAAA,5KAACQ,6PAAmCJ,vRACpC,uSAAA,mFAAA,8EAAA,jcAACI,wgBAAwCF;;AAE1D,mBAAA,4CAAA,gDAAA,mFAAA,lMAAChB,+RAEQ,WAAKU,YAAYJ;AAAjB,AACE,yCAAA,mFAAA,0DAAA,/KAACa,sBAAYT;;AAExB,wDAAA,wFAAA,gDAAA,mFAAA,kFAAA,kGAAA,mFAAA,1hBAACU,qnBAGQ,WAAAC,SAA0Bf;AAA1B,AAAA,IAAAgB,aAAAD;sBAAA,AAAAE,4CAAAD,WAAA,IAAA,7EAAME;SAAN,AAAAD,4CAAAD,WAAA,IAAA,hEAAsBG;AAAtB,AACE,SAAK,6DAAA,7DAACC,6CAAEF,yCAAoC,gDAAA,hDAACE,6CAAED;;AAE1D,mBAAA,6EAAA,gDAAA,mFAAA,nOAACzB,wSAEQ,WAAA2B,SAAwBrB;AAAxB,AAAA,IAAAsB,aAAAD;IAAAC,iBAAA,AAAAzB,4BAAAyB;eAAA,AAAAxB,4CAAAwB,eAAA,tEAAaC;AAAb,AACE,IAAMC,WAAS,qDAAA,rDAAC1B,4CAAIyB;IACdE,WAAS,qDAAA,rDAAC3B,4CAAIyB;AADpB,AAEE,GACE,EAAK,AAACG,cAAIF,eAAU,AAACE,cAAID;AAD3B;;AAAA,oBAEE,iBAAAE,oBAAK,AAACD,cAAIF;AAAV,AAAA,GAAAG;AAAoBF;;AAApBE;;;AAFF;;AAAA,oBAGE,iBAAAA,oBAAKH;AAAL,AAAA,oBAAAG;AAAc,OAACD,cAAID;;AAAnBE;;;AAHF;;AAAA,oBAIE,iBAAAA,oBAAKH;AAAL,AAAA,oBAAAG;AAAcF;;AAAdE;;;AAJF;;AAAA,AAAA;;;;;;;AAOb,mBAAA,0EAAA,gDAAA,mFAAA,hOAACjC,qTAEQ,WAAKkC,QAAQ5B;AAAb,AACE,wBAAA,2CAAA,KAAA,IAAA,KAAA,IAAA,KAAA,IAAA,KAAA,/FAAM6B;AAAN,AACE,OAAC/B,4CAAI+B,kBAAkBD;;AAEpC,mBAAA,iFAAA,gDAAA,mFAAA,vOAAClC,4SAEQ,WAAAoC,SAAwB9B;AAAxB,AAAA,IAAA+B,aAAAD;IAAAC,iBAAA,AAAAlC,4BAAAkC;eAAA,AAAAjC,4CAAAiC,eAAA,tEAAaR;AAAb,AACE,IAAMS,WAAS,qDAAA,rDAAClC,4CAAIyB;AAApB,AACE,oBAAIS;AAAJ;;AAAA","names":["refx.alpha/reg-sub","p__36871","map__36872","cljs.core/--destructure-map","cljs.core.get","level","_","cljs.core.get_in","p__36873","map__36874","calibration","map__36875","points","cal-p","next-real-high","app.db.utils/calc-real-high-point","next-high-by-boiler","app.db.constants/LEVEL-CALIBRATION","cljs.core/assoc-in","cljs.core/select-keys","refx.alpha.reg_sub","p__36876","vec__36877","cljs.core.nth","current-hotspot","id","cljs.core._EQ_","p__36880","map__36881","switches","switch-1","switch-2","cljs.core/not","and__5043__auto__","node-id","groups-bi-node-id","p__36882","map__36883","switch-3"],"sourcesContent":["(ns app.db.kits.connect.NRR-2-60.subs\n  (:require [refx.alpha :refer [reg-sub]]\n            [app.db.utils :refer [calc-real-high-point]]\n            [app.db.constants :refer [LEVEL-CALIBRATION]]))\n\n(reg-sub :NRR-2-60\n         :<- [:kit-data]\n         (fn [{:keys [level]} _]\n           (get-in level [:controllers \"NRR 2-60\"])))\n\n(reg-sub :NRR-2-60-calibration\n         :<- [:NRR-2-60]\n         (fn [{:keys [calibration]} _]\n           (let [{:keys [points cal-p]} calibration\n                 next-real-high (calc-real-high-point (:high points) (:next-value cal-p))\n                 next-high-by-boiler (+ (-> LEVEL-CALIBRATION :points-by-boiler :min) (* next-real-high (-> LEVEL-CALIBRATION :points-by-boiler :%-in-digital-unit)))]\n             (-> calibration\n                 (assoc-in [:points :next-real-high] next-real-high)\n                 (assoc-in [:points-by-boiler :next-high] next-high-by-boiler)))))\n\n(reg-sub \":connect/NRR 2-60/calibration-boiler-view\"\n         :<- [:NRR-2-60-calibration]\n         (fn [calibration _]\n           (select-keys calibration [:points :points-by-boiler])))\n\n(reg-sub :NRR-2-60-show-toolbar\n         :<- [:current-hotspot]\n         :<- [:level-controller-id]\n         (fn [[current-hotspot id] _]\n           (and (= current-hotspot \"level-controller\") (= id \"NRR 2-60\"))))\n\n(reg-sub :NRR-2-60-node-id\n         :<- [:NRR-2-60]\n         (fn [{:keys [switches]} _]\n           (let [switch-1 (get switches 1)\n                 switch-2 (get switches 2)]\n             (cond\n               (and (not switch-1) (not switch-2)) 40\n               (and (not switch-1) switch-2) 45\n               (and switch-1 (not switch-2)) 60\n               (and switch-1 switch-2) 65\n               :default 40))))\n\n(reg-sub :NRR-2-60-group\n         :<- [:NRR-2-60-node-id]\n         (fn [node-id _]\n           (let [groups-bi-node-id {40 1 45 2 60 3 65 4}]\n             (get groups-bi-node-id node-id))))\n\n(reg-sub :NRR-2-60-baud-rate\n         :<- [:NRR-2-60]\n         (fn [{:keys [switches]} _]\n           (let [switch-3 (get switches 3)]\n             (if switch-3 250 50))))\n\n"]}