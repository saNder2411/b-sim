{"version":3,"sources":["app/db/boiler_subs.cljs"],"mappings":"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","names":["refx.alpha.reg_sub","p__33217","map__33223","cljs.core/--destructure-map","cljs.core.get","kit","db","_","cljs.core.get_in","cljs.core.keyword","refx.alpha/reg-sub","boiler","settings","map__33285","unit","value","G__33289","cljs.core._EQ_","Math/round","cljs.pprint.cl_format","js/parseFloat","map__33310","G__33314","boiler-settings","p__33322","vec__33323","cljs.core.nth","sludge-mass","sludge-mass-max","sludge-mass-%","max-svg-height","p__33343","vec__33344","pressure","prev-pressure","conductivity","current-hotspot"],"sourcesContent":["(ns app.db.boiler-subs\n  (:require [refx.alpha :refer [reg-sub]]\n            [cljs.pprint :refer [cl-format]]))\n\n(reg-sub :boiler\n         (fn [{:keys [kit] :as db} _]\n           (get-in db [(keyword kit) :boiler])))\n\n(reg-sub :boiler-settings\n         :<- [:boiler]\n         (fn [boiler _]\n           (:settings boiler)))\n\n(reg-sub :boiler-settings-view\n         :<- [:boiler-settings]\n         (fn [settings _]\n           (:view settings)))\n\n(reg-sub :boiler-settings-pressure-converted-value\n         :<- [:boiler-settings]\n         (fn [settings _]\n           (let [{:keys [unit value]} (:pressure settings)]\n             (cond-> value\n                     (= unit \"psi\") (-> (* 14.5037738) Math/round)\n                     :default (->> (cl-format nil \"~,1f\") js/parseFloat)))))\n\n(reg-sub :boiler-settings-conductivity-converted-value\n         :<- [:boiler-settings]\n         (fn [settings _]\n           (let [{:keys [unit value]} (:conductivity settings)]\n             (cond-> value\n                     (= unit \"ppm\") (-> (* 0.5) Math/round)\n                     :default Math/round))))\n\n(reg-sub :water-level\n         :<- [:boiler]\n         (fn [boiler _]\n           (:water-level boiler)))\n\n(reg-sub :sludge-mass\n         :<- [:boiler]\n         (fn [boiler _]\n           (:sludge-mass boiler)))\n\n(reg-sub :sludge-mass-max\n         :<- [:boiler-settings]\n         (fn [boiler-settings _]\n           (get-in boiler-settings [:sludge-mass :max])))\n\n(reg-sub :sludge-mass-%\n         :<- [:sludge-mass]\n         :<- [:sludge-mass-max]\n         (fn [[sludge-mass sludge-mass-max] _]\n           (let [value (* 100 (/ sludge-mass sludge-mass-max))]\n             (if (< value 0) 0 value))))\n\n(reg-sub :sludge-svg-height\n         :<- [:sludge-mass-%]\n         (fn [sludge-mass-% _]\n           (let [max-svg-height 20.587]\n             (* (/ max-svg-height 100) sludge-mass-%))))\n\n(reg-sub :pressure\n         :<- [:boiler]\n         (fn [boiler _]\n           (:pressure boiler)))\n\n(reg-sub :prev-pressure\n         :<- [:boiler]\n         (fn [boiler _]\n           (:prev-pressure boiler)))\n\n(reg-sub :conductivity\n         :<- [:boiler]\n         (fn [boiler _]\n           (:conductivity boiler)))\n\n(reg-sub :show-water-foam\n         :<- [:pressure]\n         :<- [:prev-pressure]\n         :<- [:conductivity]\n         (fn [[pressure prev-pressure conductivity] _]\n           (and (< (- pressure prev-pressure) -0.027) (> conductivity 2500))))\n\n(reg-sub :boiler-show-toolbar-panel\n         :<- [:current-hotspot]\n         (fn [current-hotspot _]\n           (= current-hotspot \"boiler\")))\n"]}