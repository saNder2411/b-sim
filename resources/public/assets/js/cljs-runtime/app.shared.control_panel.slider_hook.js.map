{"version":3,"sources":["app/shared/control_panel/slider_hook.cljs"],"mappings":";AAGA,kDAAA,lDAAMA,4GAAYC,QAAQC,iBAASC,SAASC,OAAOC;AAAnD,AACE,IAAMK,WAAS,oBAAA,pBAACC;IACVC,YAAU,oBAAA,pBAACD;IACXE,iBAAe,oBAAA,pBAACF;IAChBG,cAAY,CAAG,YAAA,XAAGX,oBAAcD;IAHtCI,aAI2B,AAACW,sBAAUH;aAJtC,AAAAP,4CAAAD,WAAA,IAAA,pEAIOS;uBAJP,AAAAR,4CAAAD,WAAA,IAAA,9EAIcU;IAJdR,aAK6B,AAACS,sBAAUf;sBALxC,AAAAK,4CAAAC,WAAA,IAAA,7EAKOU;gCALP,AAAAX,4CAAAC,WAAA,IAAA,vFAKeW;IALfV,aAMuC,sBAAA,tBAACQ;mBANxC,AAAAV,4CAAAE,WAAA,IAAA,1EAMOW;6BANP,AAAAb,4CAAAE,WAAA,IAAA,pFAMoBY;IACdC,cAAY,CAAG,CAAGP,SAAOd,WAASE;IAElCoB,eAAa,WAAKC;AAAL,AACE,AAAiBA;;AACjB,IAAMC,mBAAiB,CAAG,AAAQ,AAAA,AAAAC,gBAAyBd,0CAAYR;IACjEuB,oBAAkB,CAAG,AAAS,AAAA,AAAAD,gBAAyBd,2CAAYR;IACnEwB,mBAAiB,CAAGD,oBAAkBF;IACtCI,aAAW,CAAG1B,WAASyB;IACvBE,SAAO,CAAG,CAAG,AAAWN,YAAGC,oBAAkBI;IAC7CE,cAAY,kBAAA,IAAA,gCAAA,pDACE,UAAA,TAAGD,qBACH,CAAGA,SAAO3B,WAAUA,SACd2B;;AAR1B,AASE,CAACd,iDAAAA,8DAAAA,fAAYe,0CAAAA;;AACb,IAAAC,WAAc,4BAAA,3BAAG,CAAGD,cAAY5B;AAAhC,AAAA,0HAAA6B,gDAAAA,lKAACb,0DAAAA,oEAAAA;;IAElBc,aAAW,WAAKC;AAAL,AACE,6GAAA,yCAAA,rJAACb,uDAAAA,6DAAAA;;AACD,2CAAA,1CAAM,AAAiB,AAAAK,gBAAYhB;;AACnC,gDAAA,xCAAM,AAAe,AAAAgB,gBAAYhB;;IAE9CyB,eAAa,WAAKX;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAAAE,gBAAqBhB,4BAAS,AAAac;;AAC3C,CAAM,AAAiB,AAAAE,gBAAYhB,0BAAUa;;AAC7C,QAAM,AAAe,AAAAG,gBAAYhB,wBAAUuB;;IAE1DG,gBAAc,WAAKZ;AAAL,AACE,AAACD,aAAaC;;AACd,AAACS,WAAWT;;AACZ,mDAAA,3CAAM,AAAiB,AAAAE,gBAAYd;;IAEnDyB,qBAAmB,WAAKb;AAAL,AACE,AAACD,aAAaC;;AACd,AAACS,WAAWT;;AACZ,wDAAA,hDAAM,AAAiB,AAAAE,gBAAYb;;AA1C9D,AA2LQ,IAAA0B,iBAAA,AAAAC,oBAAA;AA/IM,oBAAMpB,pBA+IZ;AA/IM,AACE,IAAAkB,iBAAA,mFAAcpB,gBAAQI;AAAtB,AAAA,uFAAAgB,wCAAAA,9HAACjC,4CAAAA,4DAAAA;;AACD,oHAAA,0CAAA,tJAACgB,uDAAAA,8DAAAA;;AAFH;;;sBADCH,gBAAQI,YAAYF,9CAgJ3BqB,iBAAA;AAAA,AAAA,CAAAC,2DAAAA,yDAAAH,eAAAE,kBAAAC,qCAAAH,eAAAE;;AA3LR,0FAgDG/B,SAASE,UAAUC,eACnBE,OAAOG,gBAAQI,YACfa,aAAaC,cAAcC","names":["app.shared.control-panel.slider-hook/use-slider","max-val","next-v-%","t-length","knob-r","msg-handler","vec__37528","cljs.core.nth","vec__37531","vec__37534","knob-ref","helix.hooks/use-ref","track-ref","fill-track-ref","init-knob-x","knob-x","set-knob-x!","helix.hooks/use-state","value-%","set-value-%!","send-message","set-send-message!","val-in-unit","on-knob-move","e","left-edge-client","cljs.core/deref","right-edge-client","length-by-client","svg-factor","next-x","next-knob-x","G__37579","on-knob-up","_","on-knob-down","on-track-down","on-fill-track-down","G__37617","G__37613","helix.hooks/wrap-fx","G__37614","helix.hooks/raw-use-effect"],"sourcesContent":["(ns app.shared.control-panel.slider-hook\n  (:require [helix.hooks :refer [use-state use-ref use-effect use-callback]]))\n\n(defn use-slider [max-val next-v-% t-length knob-r msg-handler]\n  (let [knob-ref (use-ref nil)\n        track-ref (use-ref nil)\n        fill-track-ref (use-ref nil)\n        init-knob-x (* (/ t-length 100) next-v-%)\n        [knob-x set-knob-x!] (use-state init-knob-x)\n        [value-% set-value-%!] (use-state next-v-%)\n        [send-message set-send-message!] (use-state false)\n        val-in-unit (/ (* knob-x max-val) t-length)\n\n        on-knob-move (fn [e]\n                       (.preventDefault e)\n                       (let [left-edge-client (+ (.-left (.getBoundingClientRect @track-ref)) knob-r)\n                             right-edge-client (- (.-right (.getBoundingClientRect @track-ref)) knob-r)\n                             length-by-client (- right-edge-client left-edge-client)\n                             svg-factor (/ t-length length-by-client)\n                             next-x (* (- (.-clientX e) left-edge-client) svg-factor)\n                             next-knob-x (cond\n                                           (< next-x 0) 0\n                                           (> next-x t-length) t-length\n                                           :else next-x)]\n                         (set-knob-x! next-knob-x)\n                         (set-value-%! (* (/ next-knob-x t-length) 100))))\n\n        on-knob-up (fn [_]\n                     (set-send-message! true)\n                     (set! (.-onpointermove ^js/Object @knob-ref) nil)\n                     (set! (.-onpointerup ^js/Object @knob-ref) nil))\n\n        on-knob-down (fn [e]\n                       (.preventDefault e)\n                       (.setPointerCapture @knob-ref (.-pointerId e))\n                       (set! (.-onpointermove ^js/Object @knob-ref) on-knob-move)\n                       (set! (.-onpointerup ^js/Object @knob-ref) on-knob-up))\n\n        on-track-down (fn [e]\n                        (on-knob-move e)\n                        (on-knob-up e)\n                        (set! (.-onpointerdown ^js/Object @track-ref) nil))\n\n        on-fill-track-down (fn [e]\n                             (on-knob-move e)\n                             (on-knob-up e)\n                             (set! (.-onpointerdown ^js/Object @fill-track-ref) nil))]\n    (use-effect [value-% val-in-unit send-message]\n                (when send-message\n                  (msg-handler [value-% val-in-unit])\n                  (set-send-message! false)))\n\n    [knob-ref track-ref fill-track-ref\n     knob-x value-% val-in-unit\n     on-knob-down on-track-down on-fill-track-down]))\n\n\n\n\n\n\n\n\n\n\n"]}