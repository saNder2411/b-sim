{"version":3,"sources":["app/db/sludge_valve/events.cljs"],"mappings":";AAIA,sDAAA,tDAACA,yIACa,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAAA,LAAsBO;UAAtB,AAAAL,4CAAAF,eAAA,jEAAaM;IAAbH,aAAAJ;QAAA,AAAAK,4CAAAD,WAAA,IAAA,/DAA2BK;IAA3BH,aAAA,AAAAD,4CAAAD,WAAA,IAAA;WAAA,AAAAC,4CAAAC,WAAA,IAAA,lEAA8BI;YAA9B,AAAAL,4CAAAC,WAAA,IAAA,nEAAmCK;AAAnC,AACE,OAACC,mBAASJ,GAAG,6CAAA,wIAAA,rLAACK,gIAAM,AAACC,gDAAQP,mFAAoBG,MAAMC;;AAGvE,sDAAA,tDAACb,kLACa,WAAAiB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAf,4BAAAe;SAAAA,LAAsBT;UAAtB,AAAAL,4CAAAc,eAAA,jEAAaV;IAAbW,aAAAF;QAAA,AAAAX,4CAAAa,WAAA,IAAA,/DAA2BT;YAA3B,AAAAJ,4CAAAa,WAAA,IAAA,nEAA6BP;AAA7B,AACE,IAAMQ,SAAO,AAACL,gDAAQP;IAChBa,OAAK,kDAAA,0FAAA,sEAAA,2EAAA,gEAAA,7VAACC,+CAAOb,sFAAIW;IACjBG,kBAAgB,iBAAAC,WAAQZ;AAAR,AAAA,GACQ,kDAAA,lDAACa,6CAAEJ;AAAU,QAAAG,WAAA;;AADrBA;;;AAFtB,AAIE,6BAAA,0FAAA,sEAAA,2EAAA,gEAAA,jUAACX,mBAASJ,sFAAIW,sRAAyDG;;AAGzF,sDAAA,tDAACxB,yJACa,WAAA2B,SAA0BhB;AAA1B,AAAA,IAAAiB,aAAAD;IAAAC,iBAAA,AAAAxB,4BAAAwB;SAAAA,LAAsBlB;UAAtB,AAAAL,4CAAAuB,eAAA,jEAAanB;AAAb,AACE,IAAMY,SAAO,AAACL,gDAAQP;IAChBI,QAAM,kDAAA,0FAAA,sEAAA,2EAAA,gEAAA,7VAACU,+CAAOb,sFAAIW;AADxB,6CAEMX,nBACA,sBAAA,0FAAA,sEAAA,gEAAA,tPAACI,yGAAUO,2MAAwCR,9UACnD,qVAAA,0FAAA,sEAAA,+EAAA,7jBAACC,iaAAUO;;AAEjC,sDAAA,tDAACrB,+KACa,WAAA6B,SAA0BlB;AAA1B,AAAA,IAAAmB,aAAAD;IAAAC,iBAAA,AAAA1B,4BAAA0B;SAAAA,LAAsBpB;UAAtB,AAAAL,4CAAAyB,eAAA,jEAAarB;AAAb,AACE,IAAMY,SAAO,AAACL,gDAAQP;IAChBsB,iBAAe,oIAAA,2CAAA,uEAAA,tPAACC,uGAAMC;AAD5B,AAEE,6BAAA,0FAAA,hHAACnB,mBAASJ,sFAAIW,qFAAsBU","names":["refx.alpha.reg_event_db","p__33344","p__33345","map__33361","cljs.core/--destructure-map","cljs.core.get","vec__33369","cljs.core.nth","vec__33374","kit","db","_","path","value","cljs.core/assoc-in","cljs.core.into","cljs.core.keyword","p__33429","p__33430","map__33452","vec__33453","kit-kw","unit","cljs.core.get_in","converted-value","G__33481","cljs.core._EQ_","p__33492","map__33500","p__33526","map__33529","default-values","cljs.core.merge","app.db.defaults/SLUDGE-VALVE"],"sourcesContent":["(ns app.db.sludge-valve.events\n  (:require [refx.alpha :refer [reg-event-fx reg-event-db]]\n            [app.db.defaults :as defaults]))\n\n(reg-event-db :change-sludge-valve\n              (fn [{:keys [kit] :as db} [_ [path value]]]\n                (assoc-in db (into [(keyword kit) :sludge-valve] path) value)))\n\n\n(reg-event-db :change-sludge-valve-init-countdown-value\n              (fn [{:keys [kit] :as db} [_ value]]\n                (let [kit-kw (keyword kit)\n                      unit (get-in db [kit-kw :sludge-valve :init-sim-output :countdown :unit])\n                      converted-value (cond-> value\n                                              (= unit \"m\") (* 60))]\n                  (assoc-in db [kit-kw :sludge-valve :init-sim-output :countdown :value] converted-value))))\n\n\n(reg-event-db :apply-sludge-valve-settings\n              (fn [{:keys [kit] :as db} _]\n                (let [kit-kw (keyword kit)\n                      value (get-in db [kit-kw :sludge-valve :init-sim-output :countdown :value])]\n                  (-> db\n                      (assoc-in [kit-kw :sludge-valve :countdown :value] value)\n                      (assoc-in [kit-kw :sludge-valve :settings-view] false)))))\n\n(reg-event-db :restore-defaults-sludge-valve-settings\n              (fn [{:keys [kit] :as db} _]\n                (let [kit-kw (keyword kit)\n                      default-values (merge defaults/SLUDGE-VALVE {:settings-view true})]\n                  (assoc-in db [kit-kw :sludge-valve] default-values))))\n"]}