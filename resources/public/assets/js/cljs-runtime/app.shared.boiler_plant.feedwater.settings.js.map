{"version":3,"sources":["app/shared/boiler_plant/feedwater/settings.cljs"],"mappings":"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","names":["G__39104","props__27584__auto__","maybe-ref__27585__auto__","vec__39119","helix.core/extract-cljs-props","goog/DEBUG","G__39234","app.shared.boiler-plant.feedwater.settings/temperature-init-value","value","refx.alpha/use-sub","unit","limits","app.units.constants/UNIT-LIMITS","cljs.core.get","validate-message","app.shared.components.form/field-row","app.shared.components.form/input-number","p1__39058#","refx.alpha/dispatch","p1__39061#","app.shared.components.form/validate-input-number","app.shared.components.form/select","p1__39062#","G__39293","vec__39309","G__39430","app.shared.boiler-plant.feedwater.settings/conductivity-init-value","converted-value","p1__39261#","p1__39266#","p1__39269#","G__39473","vec__39485","G__39593","app.shared.boiler-plant.feedwater.settings/sludge-ratio-init-value","p1__39440#","p1__39446#","p1__39449#","G__39605","vec__39615","G__39675","app.shared.boiler-plant.feedwater.settings/settings-form","G__39715","vec__39738","G__39813","G__39150","G__39151","obj39156","G__39163","G__39164","helix.impl.props/merge-obj","obj39172","helix.impl.props._props","helix.core/jsx","G__39206","G__39207","obj39213","helix.core/jsxs","G__39335","G__39336","obj39344","G__39354","G__39355","obj39362","G__39398","G__39399","obj39405","G__39514","G__39515","obj39520","G__39528","G__39529","obj39533","G__39572","G__39573","obj39577","G__39618","helix.core/Fragment","G__39619","G__39645","G__39647","G__39656","G__39657","G__39666","G__39667","app.shared.boiler-plant.feedwater.settings/feedwater-settings","G__39762","G__39763","obj39768","G__39781","G__39782","show-settings","show-settings-form-sim-start-values","and__5043__auto__","app.shared.components.modal/settings","G__39627","G__39628","obj39639"],"sourcesContent":["(ns app.shared.boiler-plant.feedwater.settings\n  (:require [helix.core :refer [defnc $ <>]]\n            [helix.dom :as d]\n            [refx.alpha :refer [use-sub dispatch]]\n            [app.shared.components.modal :as modal]\n            [app.shared.components.form :as f]\n            [app.units.constants :refer [UNIT-LIMITS]]))\n\n(defnc temperature-init-value []\n  (let [value (use-sub [:kit-data-by-keywords [:feedwater :temperature :value]])\n        unit (use-sub [:kit-data-by-keywords [:feedwater :temperature :unit]])\n        limits (-> UNIT-LIMITS :feed-water-temperature (get unit))\n        validate-message (str \"Initial temperature value must be within following range: [\" (:min limits) \" - \" (:max limits) \"] \" unit)]\n    ($ f/field-row {:label \"TEMPERATURE\"}\n       ($ f/input-number {:value     value\n                          :on-change #(dispatch [:change-feedwater [[:temperature :value] %]])\n                          :on-blur   (fn [] (f/validate-input-number value\n                                                                     (:min limits)\n                                                                     (:max limits)\n                                                                     validate-message\n                                                                     #(dispatch [:change-feedwater [[:temperature :value] %]])))\n                          :&         limits})\n\n       ($ f/select {:data      [{:value \"\u00b0C\" :label \"\u00b0C\"}]\n                    :value     unit\n                    :on-change #(dispatch [:change-feedwater [[:temperature :unit] %]])}))))\n\n(defnc conductivity-init-value []\n  (let [converted-value (use-sub [:feedwater-conductivity-converted-value])\n        unit (use-sub [:kit-data-by-keywords [:feedwater :conductivity :unit]])\n        limits (-> UNIT-LIMITS :feed-water-conductivity (get unit))\n        validate-message (str \"Initial conductivity value must be within following range: [\" (:min limits) \" - \" (:max limits) \"] \" unit)]\n    ($ f/field-row {:label \"CONDUCTIVITY\"}\n       ($ f/input-number {:value     converted-value\n                          :on-change #(dispatch [:change-feedwater-conductivity-value %])\n                          :on-blur   (fn [] (f/validate-input-number converted-value\n                                                                     (:min limits)\n                                                                     (:max limits)\n                                                                     validate-message\n                                                                     #(dispatch [:change-feedwater-conductivity-value %])))\n                          :&         limits})\n\n       ($ f/select {:data      [{:value \"\u00b5S/cm\" :label \"\u00b5S/cm\"} {:value \"ppm\" :label \"ppm\"}]\n                    :value     unit\n                    :on-change #(dispatch [:change-feedwater [[:conductivity :unit] %]])}))))\n\n(defnc sludge-ratio-init-value []\n  (let [value (use-sub [:kit-data-by-keywords [:feedwater :sludge-ratio :value]])\n        unit (use-sub [:kit-data-by-keywords [:feedwater :sludge-ratio :unit]])\n        limits (-> UNIT-LIMITS :feed-water-sludge-ratio (get unit))\n        validate-message (str \"Initial sludge ratio value must be within following range: [\" (:min limits) \" - \" (:max limits) \"] \" unit)]\n    ($ f/field-row {:label \"SLUDGE RATIO\"}\n       ($ f/input-number {:value     value\n                          :on-change #(dispatch [:change-feedwater [[:sludge-ratio :value] %]])\n                          :on-blur   (fn [] (f/validate-input-number value\n                                                                     (:min limits)\n                                                                     (:max limits)\n                                                                     validate-message\n                                                                     #(dispatch [:change-feedwater [[:sludge-ratio :value] %]])))\n                          :&         limits})\n\n       ($ f/select {:data      [{:value \"ratio\" :label \"ratio\"}]\n                    :value     unit\n                    :on-change #(dispatch [:change-feedwater [[:sludge-ratio :unit] %]])}))))\n\n(defnc settings-form []\n  (<>\n    (d/div {:class \"divider\"} \"specifications\")\n\n    ($ temperature-init-value)\n\n    ($ conductivity-init-value)\n\n    ($ sludge-ratio-init-value)))\n\n(defnc feedwater-settings []\n  (let [show-settings (use-sub [:kit-data-by-keywords [:feedwater :settings-view]])\n        show-settings-form-sim-start-values (use-sub [:show-settings-form-sim-start-values])]\n    (when (and show-settings show-settings-form-sim-start-values)\n      ($ modal/settings {:title      \"Feedwater\"\n                         :on-default #(dispatch [:restore-defaults-feedwater-settings])\n                         :on-done    #(dispatch [:apply-feedwater-settings])}\n\n         ($ settings-form)))))\n"]}