{"version":3,"sources":["app/events.cljs"],"mappings":"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","names":["app.events/check-and-throw","a-spec","db","cljs.spec.alpha.valid_QMARK_","cljs.core.ex_info","cljs.spec.alpha/explain-str","app.events/check-spec-interceptor","refx.interceptors/after","cljs.core.partial","app.events/->local-store-interceptor","app.db/todos->local-store","app.events/todo-interceptors","refx.interceptors.path","app.events/allocate-next-id","todos","cljs.core.fnil","cljs.core/inc","cljs.core/last","cljs.core/keys","refx.alpha.reg_event_fx","refx.alpha.inject_cofx","p__39614","map__39615","cljs.core/--destructure-map","cljs.core.get","local-store-todos","_","cljs.core.assoc","app.db/default-db","refx.alpha.reg_event_db","p__39616","vec__39617","cljs.core.nth","new-filter-kw","p__39620","vec__39621","text","id","p__39624","vec__39625","cljs.core.update_in","cljs.core/not","p__39628","vec__39629","title","cljs.core/assoc-in","p__39632","vec__39633","cljs.core.dissoc","done-ids","cljs.core/vals","cljs.core.filter","cljs.core.map","cljs.core.reduce","cljs.core/dissoc","new-done","cljs.core/not-every?","p1__39636#","p2__39637#"],"sourcesContent":["(ns app.events\n  (:require [app.db :as db]\n            [refx.alpha :refer [reg-event-db reg-event-fx inject-cofx]]\n            [refx.interceptors :refer [path after]]\n            [cljs.spec.alpha :as s]))\n\n\n(defn check-and-throw [a-spec db]\n  (when-not (s/valid? a-spec db)\n    (throw (ex-info (str \"spec check failed: \" (s/explain-str a-spec db)) {}))))\n\n(def check-spec-interceptor (after (partial check-and-throw ::db/db)))\n\n(def ->local-store-interceptor (after db/todos->local-store))\n\n(def todo-interceptors [check-spec-interceptor (path :todos) ->local-store-interceptor])\n\n(defn allocate-next-id [todos]\n  ((fnil inc 0) (last (keys todos))))\n\n(reg-event-fx :initialise-db\n              [(inject-cofx :local-store-todos) check-spec-interceptor]\n              (fn [{:keys [db local-store-todos]} _]\n                {:db (assoc db/default-db :todos local-store-todos)}))\n\n(reg-event-db :set-showing\n              [check-spec-interceptor]\n              (fn [db [_ new-filter-kw]]\n                (assoc db :showing new-filter-kw)))\n\n(reg-event-db :add-todo\n              todo-interceptors\n              (fn [todos [_ text]]\n                (let [id (allocate-next-id todos)]\n                  (assoc todos id {:id id :title text :done false}))))\n\n(reg-event-db :toggle-done\n              todo-interceptors\n              (fn [todos [_ id]]\n                (update-in todos [id :done] not)))\n\n(reg-event-db :save\n              todo-interceptors\n              (fn [todos [_ id title]]\n                (assoc-in todos [id :title] title)))\n\n(reg-event-db :delete-todo\n              todo-interceptors\n              (fn [todos [_ id]]\n                (dissoc todos id)))\n\n(reg-event-db :clear-completed\n              todo-interceptors\n              (fn [todos _]\n                (let [done-ids (->> (vals todos)\n                                    (filter :done)\n                                    (map :id))]\n                  (reduce dissoc todos done-ids))))\n\n(reg-event-db :complete-all-toggle\n              todo-interceptors\n              (fn [todos _]\n                (let [new-done (not-every? :done (vals todos))]\n                  (reduce #(assoc-in %1 [%2 :done] new-done) todos (keys todos)))))\n"]}