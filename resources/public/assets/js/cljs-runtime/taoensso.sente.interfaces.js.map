{"version":3,"sources":["taoensso/sente/interfaces.cljc"],"mappings":"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","names":["taoensso$sente$interfaces$IServerChanAdapter$ring_req__GT_server_ch_resp$dyn","x__5393__auto__","m__5394__auto__","taoensso.sente.interfaces/ring-req->server-ch-resp","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","taoensso.sente.interfaces/IServerChanAdapter","sch-adapter","ring-req","callbacks-map","taoensso$sente$interfaces$IServerChan$sch_open_QMARK_$dyn","taoensso.sente.interfaces/sch-open?","taoensso$sente$interfaces$IServerChan$sch_close_BANG_$dyn","taoensso.sente.interfaces/sch-close!","taoensso$sente$interfaces$IServerChan$sch_send_BANG_$dyn","taoensso.sente.interfaces/sch-send!","taoensso.sente.interfaces/IServerChan","sch","websocket?","msg","taoensso$sente$interfaces$IPacker$pack$dyn","taoensso.sente.interfaces/pack","taoensso$sente$interfaces$IPacker$unpack$dyn","taoensso.sente.interfaces/unpack","taoensso.sente.interfaces/IPacker","_","x"],"sourcesContent":["(ns taoensso.sente.interfaces\n  \"Alpha, subject to change.\n  Public interfaces / extension points.\n  Ref. https://github.com/ptaoussanis/sente/issues/425 for more info.\"\n  (:require [taoensso.encore :as enc]))\n\n;;;; Web servers\n\n(defprotocol IServerChanAdapter ; sch-adapter\n  \"For Sente to support a web server, an \\\"adapter\\\" for that server\n  must be provided that implements this protocol.\"\n\n  (ring-req->server-ch-resp [sch-adapter ring-req callbacks-map]\n    \"Given a Ring request (WebSocket GET handshake or Ajax GET/POST),\n    returns a Ring response map appropriate for the underlying web server.\n\n    `callbacks-map` contains the following functions that MUST be called as described:\n\n      `:on-open` - (fn [sch websocket?])\n        Call exactly once after `sch` is available for sending.\n\n      `:on-close` - (fn [sch websocket? status])\n        Call exactly once after `sch` is closed for any cause, incl. an\n        explicit call to `sch-close!`. `status` arg type is currently undefined.\n\n      `:on-msg` - (fn [sch websocket? msg])\n        Call for each `String` or byte[] message received from client.\n\n      `:on-error` - (fn [sch websocket? error])\n        Currently unused.\n\n       Note: all `sch` (\\\"server channel\\\") args provided above MUST implement\n       the `IServerChan` protocol.\n\n    `callbacks-map` contains the following functions IFF server is configured to\n    use 3-arity (async) Ring v1.6+ handlers:\n\n      `:ring-async-resp-fn`  - ?(fn [ring-response])\n      `:ring-async-raise-fn` - ?(fn [throwable])\"))\n\n(defprotocol IServerChan ; sch\n  \"This protocol must be implemented by the \\\"server channel\\\" arguments\n  provided to callback functions via `ring-req->server-ch-resp`.\"\n\n  (sch-open?  [sch] \"Returns true iff the channel is currently open.\")\n  (sch-close! [sch]\n    \"If the channel is open when called: closes the channel and returns true.\n    Otherwise noops and returns falsey.\")\n  (sch-send! [sch websocket? msg]\n    \"If the channel is open when called: sends a message over channel and\n    returns true. Otherwise noops and returns falsey.\"))\n\n;;;; Packers\n\n(defprotocol IPacker\n  \"Extension pt. for client<->server comms data un/packers:\n  arbitrary Clojure data <-> serialized payloads.\n\n  NB if dealing with non-string payloads, see also\n  `taoensso.sente/*write-legacy-pack-format?*`.\"\n\n  (pack   [_ x])\n  (unpack [_ x]))\n"]}