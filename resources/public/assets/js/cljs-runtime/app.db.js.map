{"version":3,"sources":["app/db.cljs"],"mappings":";AAKA,AAAAA,yBAAA,AAAA,2DAAA,AAAA,wEAAYC;AACZ,AAAAD,yBAAA,AAAA,mEAAA,AAAA,iFAAeE;AACf,AAAAF,yBAAA,AAAA,iEAAA,AAAA,kFAAcG;AACd,AAAAH,yBAAA,AAAA,gEAAA,AAAA,ybAAc,AAAAI,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,0RAAA,AAAA,KAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAC,qBAAAD;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAC,qBAAAD,eAAA,EAAA,AAAAE,0BAAAF,SAAA,wDAAA,EAAA,AAAAE,0BAAAF,SAAA,4DAAA,AAAAE,0BAAAF,SAAA;GAAA,AAAA,iCAAA,AAAA,0RAAA,AAAA,KAAA,AAAA,wPAAA,AAAA,iCAAA,AAAA,+tDAAA,AAAA;AACd,AAAAL,yBAAA,AAAA,iEAAA,AAAA,8zBAAe,AAAAQ,8BAAA,AAAA,8xBAAA,mFAAO,AAAAE,yDAAA,AAAA,mOAAA,AAAAC,yDAAA,AAAA,sNAAA,mFAAA,2DAAA,yEAAA,2CAAA,+EAAA,WAAAC,iBAAAC;AAAA,AAAA,OAAAC,4CAAAD,iBAAA;GAAA,qDAAA,mCAAA,8FAAA,KAAA,qDAAAP,qBAAA,6FAAA,AAAA,2EAAA,0FAAA,AAAA,oOAAA,oFAAA,WAAAS;AAAA,AAAA,OAAAT,qBAAAS;iBAAP,WAAAN,jBAAO;AAAP,AAA+B,QAAAA,4BAAWO;WAA1C;AACf,AAAAhB,yBAAA,AAAA,sEAAA,AAAA,qRAAA,iFAAA,0DAAA,uDAAA;AAEA,AAAAA,yBAAA,AAAA,4DAAA,AAAA,iYAAY,AAAAI,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,kOAAA,AAAA,KAAA,KAAA,mFAAA,WAAAa;AAAA,AAAA,OAAAX,qBAAAW;GAAA,WAAAA;AAAA,AAAA,OAAAV,0BAAAU,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAAV,0BAAAU,SAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAX,qBAAAW,eAAA,EAAA,AAAAV,0BAAAU,SAAA,4DAAA,AAAAV,0BAAAU,SAAA;GAAA,AAAA,iCAAA,AAAA,kOAAA,AAAA,KAAA,AAAA,2MAAA,AAAA,iCAAA,AAAA,szCAAA,AAAA;AAEZ,oBAAA,2CAAA,6EAAA,0DAAA,tMAAKC,qHAAmB,AAACC;AAUzB,gBAAA,hBAAKC;AAEL,+BAAA,/BAAMC,sEAAoBC;AAA1B,AACE,OAAUC,qBAAgBH,cAAO,4CAAKE;;AAcxC,oBAAA,pBAACE,oGACS,WAAKC,KAAKC;AAAV,AAEE,0DAAA,nDAACC,8CAAMF,qFAEK,AAACG,6CAAK,AAACT,uBACD,iBAAAU,WAAS,AAAUN,qBAAgBH;AAAnC,AAAA,GAAA,CAAAS,YAAA;AAAA;;AACS,6DAAAA,tDAACC","names":["cljs.spec.alpha/def-impl","cljs.core/int?","cljs.core/string?","cljs.core/boolean?","cljs.spec.alpha/map-spec-impl","G__39609","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha/and-spec-impl","p1__39610#","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","i__14715__auto__","v__14716__auto__","cljs.core.nth","G__39611","cljs.core/PersistentTreeMap","G__39612","app.db/default-db","cljs.core/sorted-map","app.db/ls-key","app.db/todos->local-store","todos","js/localStorage","refx.alpha/reg-cofx","cofx","_","cljs.core.assoc","cljs.core.into","G__39613","cljs.reader.read_string"],"sourcesContent":["(ns app.db\n  (:require [cljs.spec.alpha :as s]\n            [refx.alpha :refer [reg-cofx]]\n            [cljs.reader :refer [read-string]]))\n\n(s/def ::id int?)\n(s/def ::title string?)\n(s/def ::done boolean?)\n(s/def ::todo (s/keys :req-un [::id ::title ::done]))\n(s/def ::todos (s/and (s/map-of ::id ::todo) #(instance? PersistentTreeMap %)))\n(s/def ::showing #{:all :active :done})\n\n(s/def ::db (s/keys :req-un [::todos ::showing]))\n\n(def default-db {:todos (sorted-map) :showing :all})\n\n;; -- Local Storage  ----------------------------------------------------------\n;;\n;; Part of the todomvc challenge is to store todos in LocalStorage, and\n;; on app startup, reload the todos from when the program was last run.\n;; But the challenge stipulates to NOT load the setting for the \"showing\"\n;; filter. Just the todos.\n;;\n\n(def ls-key \"todos-refx\")                                ;; local-store key\n\n(defn todos->local-store [todos]\n  (.setItem js/localStorage ls-key (str todos)))            ;; sorted-map written as an EDN map\n\n\n;; -- cofx Registrations  -----------------------------------------------------\n\n;; Use `reg-cofx` to register a \"coeffect handler\" which will inject the todos\n;; stored in local-store.\n;;\n;; To see it used, look in `events.cljs` at the event handler for `:initialise-db`.\n;; That event handler has the interceptor `(inject-cofx :local-store-todos)`\n;; The function registered below will be used to fulfill that request.\n;;\n;; We must supply a `sorted-map` but in LocalStore it is stored as a `map`.\n;;\n(reg-cofx :local-store-todos\n          (fn [cofx _]\n            ;; put the local-store todos into the coeffect under :local-store-todos\n            (assoc cofx :local-store-todos\n                        ;; read in todos from local-store, and process into a sorted map\n                        (into (sorted-map)\n                              (some->> (.getItem js/localStorage ls-key)\n                                       (read-string) ;; EDN map -> map\n                                       )))))"]}